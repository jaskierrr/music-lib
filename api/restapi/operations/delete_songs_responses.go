// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"main/internal/models"
)

// DeleteSongsNoContentCode is the HTTP code returned for type DeleteSongsNoContent
const DeleteSongsNoContentCode int = 204

/*
DeleteSongsNoContent no content

swagger:response deleteSongsNoContent
*/
type DeleteSongsNoContent struct {
}

// NewDeleteSongsNoContent creates DeleteSongsNoContent with default headers values
func NewDeleteSongsNoContent() *DeleteSongsNoContent {

	return &DeleteSongsNoContent{}
}

// WriteResponse to the client
func (o *DeleteSongsNoContent) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(204)
}

// DeleteSongsBadRequestCode is the HTTP code returned for type DeleteSongsBadRequest
const DeleteSongsBadRequestCode int = 400

/*
DeleteSongsBadRequest bad request

swagger:response deleteSongsBadRequest
*/
type DeleteSongsBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewDeleteSongsBadRequest creates DeleteSongsBadRequest with default headers values
func NewDeleteSongsBadRequest() *DeleteSongsBadRequest {

	return &DeleteSongsBadRequest{}
}

// WithPayload adds the payload to the delete songs bad request response
func (o *DeleteSongsBadRequest) WithPayload(payload *models.ErrorResponse) *DeleteSongsBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete songs bad request response
func (o *DeleteSongsBadRequest) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteSongsBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
