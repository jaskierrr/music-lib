// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewGetSongsLyricsParams creates a new GetSongsLyricsParams object
// with the default values initialized.
func NewGetSongsLyricsParams() GetSongsLyricsParams {

	var (
		// initialize parameters with default values

		coupletDefault = int64(0)

		limitDefault = int64(0)
	)

	return GetSongsLyricsParams{
		Couplet: &coupletDefault,

		Limit: &limitDefault,
	}
}

// GetSongsLyricsParams contains all the bound params for the get songs lyrics operation
// typically these are obtained from a http.Request
//
// swagger:parameters GetSongsLyrics
type GetSongsLyricsParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*couplet number
	  In: query
	  Default: 0
	*/
	Couplet *int64
	/*song id
	  Required: true
	  In: query
	*/
	ID int64
	/*limit of couplets
	  In: query
	  Default: 0
	*/
	Limit *int64
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetSongsLyricsParams() beforehand.
func (o *GetSongsLyricsParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qCouplet, qhkCouplet, _ := qs.GetOK("couplet")
	if err := o.bindCouplet(qCouplet, qhkCouplet, route.Formats); err != nil {
		res = append(res, err)
	}

	qID, qhkID, _ := qs.GetOK("id")
	if err := o.bindID(qID, qhkID, route.Formats); err != nil {
		res = append(res, err)
	}

	qLimit, qhkLimit, _ := qs.GetOK("limit")
	if err := o.bindLimit(qLimit, qhkLimit, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindCouplet binds and validates parameter Couplet from query.
func (o *GetSongsLyricsParams) bindCouplet(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewGetSongsLyricsParams()
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("couplet", "query", "int64", raw)
	}
	o.Couplet = &value

	return nil
}

// bindID binds and validates parameter ID from query.
func (o *GetSongsLyricsParams) bindID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("id", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("id", "query", raw); err != nil {
		return err
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("id", "query", "int64", raw)
	}
	o.ID = value

	return nil
}

// bindLimit binds and validates parameter Limit from query.
func (o *GetSongsLyricsParams) bindLimit(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewGetSongsLyricsParams()
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("limit", "query", "int64", raw)
	}
	o.Limit = &value

	return nil
}
