// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetSongsParams creates a new GetSongsParams object
// with the default values initialized.
func NewGetSongsParams() GetSongsParams {

	var (
		// initialize parameters with default values

		limitDefault = int64(0)

		pageDefault = int64(0)
	)

	return GetSongsParams{
		Limit: &limitDefault,

		Page: &pageDefault,
	}
}

// GetSongsParams contains all the bound params for the get songs operation
// typically these are obtained from a http.Request
//
// swagger:parameters GetSongs
type GetSongsParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*group name
	  In: query
	*/
	Group *string
	/*limit of pages
	  In: query
	  Default: 0
	*/
	Limit *int64
	/*link
	  In: query
	*/
	Link *string
	/*page number
	  In: query
	  Default: 0
	*/
	Page *int64
	/*release date
	  In: query
	*/
	ReleaseDate *string
	/*song name
	  In: query
	*/
	Song *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetSongsParams() beforehand.
func (o *GetSongsParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qGroup, qhkGroup, _ := qs.GetOK("group")
	if err := o.bindGroup(qGroup, qhkGroup, route.Formats); err != nil {
		res = append(res, err)
	}

	qLimit, qhkLimit, _ := qs.GetOK("limit")
	if err := o.bindLimit(qLimit, qhkLimit, route.Formats); err != nil {
		res = append(res, err)
	}

	qLink, qhkLink, _ := qs.GetOK("link")
	if err := o.bindLink(qLink, qhkLink, route.Formats); err != nil {
		res = append(res, err)
	}

	qPage, qhkPage, _ := qs.GetOK("page")
	if err := o.bindPage(qPage, qhkPage, route.Formats); err != nil {
		res = append(res, err)
	}

	qReleaseDate, qhkReleaseDate, _ := qs.GetOK("releaseDate")
	if err := o.bindReleaseDate(qReleaseDate, qhkReleaseDate, route.Formats); err != nil {
		res = append(res, err)
	}

	qSong, qhkSong, _ := qs.GetOK("song")
	if err := o.bindSong(qSong, qhkSong, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindGroup binds and validates parameter Group from query.
func (o *GetSongsParams) bindGroup(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Group = &raw

	return nil
}

// bindLimit binds and validates parameter Limit from query.
func (o *GetSongsParams) bindLimit(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewGetSongsParams()
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("limit", "query", "int64", raw)
	}
	o.Limit = &value

	return nil
}

// bindLink binds and validates parameter Link from query.
func (o *GetSongsParams) bindLink(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Link = &raw

	return nil
}

// bindPage binds and validates parameter Page from query.
func (o *GetSongsParams) bindPage(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewGetSongsParams()
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("page", "query", "int64", raw)
	}
	o.Page = &value

	return nil
}

// bindReleaseDate binds and validates parameter ReleaseDate from query.
func (o *GetSongsParams) bindReleaseDate(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.ReleaseDate = &raw

	return nil
}

// bindSong binds and validates parameter Song from query.
func (o *GetSongsParams) bindSong(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Song = &raw

	return nil
}
