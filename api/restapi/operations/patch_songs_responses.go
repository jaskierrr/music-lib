// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"main/internal/models"
)

// PatchSongsOKCode is the HTTP code returned for type PatchSongsOK
const PatchSongsOKCode int = 200

/*
PatchSongsOK Song is updated

swagger:response patchSongsOK
*/
type PatchSongsOK struct {

	/*
	  In: Body
	*/
	Payload *models.Song `json:"body,omitempty"`
}

// NewPatchSongsOK creates PatchSongsOK with default headers values
func NewPatchSongsOK() *PatchSongsOK {

	return &PatchSongsOK{}
}

// WithPayload adds the payload to the patch songs o k response
func (o *PatchSongsOK) WithPayload(payload *models.Song) *PatchSongsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch songs o k response
func (o *PatchSongsOK) SetPayload(payload *models.Song) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchSongsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PatchSongsBadRequestCode is the HTTP code returned for type PatchSongsBadRequest
const PatchSongsBadRequestCode int = 400

/*
PatchSongsBadRequest bad request

swagger:response patchSongsBadRequest
*/
type PatchSongsBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewPatchSongsBadRequest creates PatchSongsBadRequest with default headers values
func NewPatchSongsBadRequest() *PatchSongsBadRequest {

	return &PatchSongsBadRequest{}
}

// WithPayload adds the payload to the patch songs bad request response
func (o *PatchSongsBadRequest) WithPayload(payload *models.ErrorResponse) *PatchSongsBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch songs bad request response
func (o *PatchSongsBadRequest) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchSongsBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
